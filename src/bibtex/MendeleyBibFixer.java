package bibtex;

import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * Reads an input BibTeX file generated by Mendeley (see mendeley.com) and creates a new BibTeX file including, for each
 * BibTeX entry, only the content that is interesting (according to a blacklist). Also, makes sure the title is the
 * first entry of the item and uses the URL as a comment above the BibTeX entry.
 * 
 * @author Vitor E. Silva Souza (vitorsouza@gmail.com)
 * @version 1.0
 */
public class MendeleyBibFixer {
	/** Path to input file. */
	private static final String BIB_FILE_INPUT_PATH = "/home/vitor/Temp/mendeley.bib";

	/** Path to output file. */
	private static final String BIB_FILE_OUTPUT_PATH = "/home/vitor/Temp/mendeley-fix.bib";

	/** BibTeX keys we're not interested in. */
	private static final String[] blacklist = new String[] { "abstract", "doi", "file", "issn", "keywords", "mendeley-tags", "month", "isbn", "address" };

	/** BibTeX key for the publication title. */
	private static final String titleKey = "title";

	/** BibTeX key for the publication URL. */
	private static final String urlKey = "url";

	/** Main method. */
	public static void main(String[] args) throws Exception {
		File inFile = new File(BIB_FILE_INPUT_PATH);
		File outFile = new File(BIB_FILE_OUTPUT_PATH);

		// Initializes the objects needed for the parsing and output.
		Scanner in = new Scanner(inFile);
		PrintWriter out = new PrintWriter(outFile);
		StringBuilder builder = new StringBuilder();
		String titleLine = null, urlLine = null;

		// Parses all lines in the source file.
		while (in.hasNextLine()) {
			String line = in.nextLine();

			// Checks if it's the beginning of a new item.
			if (line.startsWith("@")) {
				builder.append(line).append('\n');

				// Prints a logging message.
				int idxA = line.indexOf('{'), idxB = line.indexOf(',');
				if ((idxA != -1) && (idxB > idxA)) {
					String bibKey = line.substring(idxA + 1, idxB);
					System.out.println("Processing: " + bibKey);
				}
			}

			// Checks if it's the end of an item. Prints the item to the output.
			else if (line.startsWith("}")) {
				builder.append('}').append('\n');
				printToOutput(builder, titleLine, urlLine, out);
				titleLine = null;
				urlLine = null;
				builder = new StringBuilder();
			}

			// Checks if it's the title line. Separates it so it can be the 1st line of the BibTeX item.
			else if (line.startsWith(titleKey))
				titleLine = " " + line + "\n";

			// Checks if it's the URL line. Separates it so it can be the BibTeX item's comment.
			else if (line.startsWith(urlKey)) {
				int idx = line.indexOf('{');
				if (idx != -1) {
					int idxB = line.indexOf('}');
					urlLine = "% Source: " + line.substring(idx + 1, idxB);
				}
			}

			// Otherwise, check if the line is blacklisted and include in the output if it's not.
			else if (!isBlacklisted(line))
				builder.append(' ').append(line).append('\n');
		}

		// Closes everything.
		in.close();
		out.close();

		System.out.println("Done!");
	}

	/** Prints the BibTeX item to the output, fixing the title position and placing the URL as comment. */
	private static void printToOutput(StringBuilder builder, String titleLine, String urlLine, PrintWriter out) {
		int idx = builder.indexOf("\n");
		if (idx != -1) {
			builder.insert(idx + 1, titleLine);
			if (urlLine != null)
				out.println(urlLine);
			out.println(builder.toString());
			out.println();
		}
	}

	/** Checks if the line refers to a BibTeX item that has been blacklisted (not interestint to us). */
	private static boolean isBlacklisted(String line) {
		for (String key : blacklist)
			if (line.startsWith(key))
				return true;

		return false;
	}
}
